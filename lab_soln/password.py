import os
import hashlib

'''
create salted_password(password, salt):
Salt - This is normally generated by this code but for this exercise it will be passed to your function: os.urandom(32).hex()
Your function should append the Salt to the password and
hash with the SHA256 function from the hashlib Python module and return the result.
'''



def salted_password(password, salt):
    '''
    :param password:

    :param salt: The salt adds randomness to passwords. For instance, if a database of passwords gets compromised,
    (assuming no salt was used) a hacker can compromise all accounts where poor password hygiene is used.
    The hacker can compare entries against a rainbow table (dict of plaintext common passwords -> their hash values)
    and compute the intersection of hashes found in target DB & rainbow table to steal user passwords.
    Adding random bits through salting and appending to password before hash adds uniqueness, thereby making rainbow
    table comparisons obsolete given each password has randomness added!
    Salt mechanism is accomplished by os.urandom(32) which is guaranteed to be passed in as parameter as noted in
    description. This returns a string which represents random bytes suitable for cryptographic use.

    :return: SHA256 hashed value of both appended parameters
    '''
    if password is not None:
        salted_pass = password + salt
        return hashlib.sha256(salted_pass.encode()).hexdigest()


def main():
    print(salted_password("!@CgERR$%", os.urandom(32).hex()))
    print(salted_password(None, os.urandom(32).hex()))


if __name__ == '__main__':
    main()